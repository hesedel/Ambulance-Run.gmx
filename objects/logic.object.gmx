<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>score_distance</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>score_accumulated</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>score</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>level</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>level_timeout</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>started = false;
patient_life_initial = ((32 * (room_height / 2)) / 5);
patient_life_initial += (60 * 10); // + 10 seconds
patient_life = patient_life_initial;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>201</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_create_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>10</kind>
            <object>road</object>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>201</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_create_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>10</kind>
            <object>ambulance</object>
          </argument>
          <argument>
            <kind>0</kind>
            <string>224</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>416</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// killing player
if(ambulance.health_current &lt;= 0) {
    gameover('The ambulance is destroyed!');
}

// killing patients
if(logic.patient_life &lt;= 0) {
    gameover('A patient died!');
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(
    keyboard_check(vk_up) ||
    (
        keyboard_check(vk_down) &amp;&amp;
        (
            road.y + (ambulance.speed_current / ambulance.deceleration) &gt; 0 &amp;&amp;
            road.y + (ambulance.speed_current / ambulance.deceleration) &gt; road.y_current - room_height
        )
    )
)
    road.y += ambulance_accelerate(); // move ambulance forward or reverse
else
    road.y += ambulance_decelerate(); // stop ambulance

with(ambulance) {

    // collisions
    if(
        siren_timeout == 0 &amp;&amp;
        collision_line(
            x - (sprite_width / 2),y - (sprite_height / 2),
            x + (sprite_width / 2),y - (sprite_height / 2),
            vehicles,false,false
        )
    ) {
        health_current -= speed_current * (logic.level / 10);
        speed_current = 0;
        audio_play_sound(sound_bump, 0, false);
    }
    
    // killing player
    if(health_current &lt;= 0) {
        health_current = 0;
        //gameover('The ambulance is destroyed!');
    }
    
    if(!vehicle_onExit(ambulance))
        image_angle = 0;

    if(
        keyboard_check(vk_right) &amp;&amp;
        !vehicle_onExit(ambulance)
    ) {
        if(speed_current &gt; 0) { // forward
            image_angle = -abs(speed_current);
        } else if(speed_current &lt; 0) { // reverse
            image_angle = abs(speed_current) * 2;
        }

        // strafe ambulance right
        if(
            place_meeting(x + sprite_width,y,roads) ||
            place_meeting(x + sprite_width,y,exits)
        )
            x += abs(speed_current) / 2;

    }

    if(
        keyboard_check(vk_left) &amp;&amp;
        !vehicle_onExit(ambulance)
    ) {
        if(speed_current &gt; 0) { // forward
            image_angle = abs(speed_current);
        } else if(speed_current &lt; 0) { // reverse
            image_angle = -(abs(speed_current) * 2);
        }

        // strafe ambulance left
        if(
            place_meeting(x - sprite_width,y,roads) ||
            place_meeting(x - sprite_width,y,exits)
        )
            x -= abs(speed_current) / 2;

    }

    // getting sirens
    if(instance_place(x,y,siren)) {
        with(instance_place(x,y,siren)) {
            instance_destroy();
        }
        if(sirens &lt; 3) {
            sirens++;
        }
        logic.score_accumulated += 1000;
        audio_play_sound(sound_siren_pickup, 0, false);
    }

    // killing patients
    if(logic.started)
        logic.patient_life--;
    if(logic.patient_life &lt;= 0) {
        logic.patient_life = 0;
        //gameover('A patient died!');
    }

    // getting patients
    if(instance_place(x,y,patient)) {
        with(instance_place(x,y,patient)) {
            instance_destroy();
        }
        logic.score_accumulated += 10000;
        logic.level++;
        logic.patient_life_initial = logic.patient_life + ((32 * (room_height / 2)) / (ambulance.speed_max + ((logic.level - 1) / 2)));
        logic.patient_life_initial += (60 * 1); // + 1 seconds
        logic.patient_life = logic.patient_life_initial;
        logic.level_timeout = 60 * 6; // 6 seconds
        audio_play_sound(sound_patient_pickup, 0, false);
    }
    logic.level_timeout--;

}

// set score
score_distance = floor(road.y);
score = score_distance + score_accumulated;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = (room_width * (5 / 8)) + 16;

if(!started) {
    draw_set_color(make_color_rgb(255, 255, 255));
    draw_set_alpha(.75);
    draw_rectangle(1, 1, x - 18, room_height - 2, false);
    draw_set_color(make_color_rgb(0, 0, 0));
    draw_set_halign(fa_center);
    draw_set_alpha(1);
    draw_text(room_width * (2.5 / 8), 16 * 3, 'Welcome to');
    draw_set_font(font_title);
    draw_text(room_width * (2.5 / 8), 16 * 4, 'Ambulance Run!');
    draw_set_font(font_default);
    draw_text(room_width * (2.5 / 8), 16 * 6, '(The Videogame)');
    draw_text(room_width * (2.5 / 8), 16 * 8, 'Rescue the patients');
    draw_text(room_width * (2.5 / 8), 16 * 9, 'before their health runs out');
    draw_text(room_width * (2.5 / 8), 16 * 10, 'and they die!');
    draw_text(room_width * (2.5 / 8), 16 * 12, 'Hold the [UP ARROW] key');
    draw_text(room_width * (2.5 / 8), 16 * 13, 'to move forward and start the game!');
    draw_set_halign(fa_left);
}

draw_set_color(make_color_rgb(0, 0, 0));
draw_set_alpha(.75);

draw_rectangle(room_width * (5 / 8), 0, room_width, room_height, false);

draw_set_color(make_color_rgb(255, 255, 255));
draw_set_alpha(1);

// draw score
draw_text(x, (16 * 1), 'Score: ' + string(score));
draw_sprite(sprite_patient, image_index, x + (sprite_get_width(sprite_patient) / 2), (16 * 3) + (sprite_get_height(sprite_patient) / 2));

// draw patient health
draw_text(x + 32, (16 * 3), 'Patient Health');

draw_set_color(make_color_rgb(231, 76, 60));

// draw_text((room_width * (2 / 3)), (16 * 4), string(ceil(logic.patient_life / logic.patient_life_initial * 100)));
draw_rectangle(
    x + 32, (16 * 4),
    x + 32 + ((room_width - 48 - x) * (logic.patient_life / logic.patient_life_initial)), (16 * 5),
    false
);

draw_set_color(make_color_rgb(255, 255, 255));

// draw ambulance health
draw_text(x, (16 * 6), 'Ambulance Health:');

draw_set_color(make_color_rgb(52, 152, 219));

draw_rectangle(
    x, (16 * 7),
    x + ((room_width - 16 - x) * (ambulance.health_current / ambulance.health_max)), (16 * 8),
    false
);

draw_set_color(make_color_rgb(255, 255, 255));

// draw sirens
draw_text(x, (16 * 9), 'Sirens:');

draw_set_color(make_color_rgb(46, 204, 113));

//draw_text(x, (16 * 10), string(ambulance.sirens));
for(i = 0; i &lt; ambulance.sirens; i++) {
    draw_sprite(sprite_siren, image_index,
        x + (sprite_get_width(sprite_siren) / 2) + (48 * i),
        (16 * 10) + (sprite_get_height(sprite_siren) / 2) + 8
    );
}

draw_set_color(make_color_rgb(255, 255, 255));

draw_text(x, (16 * 12), 'Press [SPACEBAR]');
draw_text(x, (16 * 13), 'to activate a Siren.');

// draw level
draw_text(x, (16 * 27), 'Level: ' + string(level));

if(logic.level_timeout &gt; 0 &amp;&amp; logic.level_timeout &lt; 60 * 5) {
    draw_set_color(make_color_rgb(255, 255, 255));
    draw_set_alpha(.75);
    draw_rectangle(
        1, 1,
        x - 18, (16 * 3) - 2,
        false
    );
    draw_set_font(font_level_up);
    draw_set_color(make_color_rgb(0, 0, 0));
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_set_alpha(1);
    draw_text(room_width * (2.5 / 8), 24, 'Level ' + string(level));
}

draw_set_color(make_color_rgb(0, 0, 0));
draw_set_font(font_default);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_alpha(1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>started = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(ambulance.sirens &gt; 0 &amp;&amp; ambulance.siren_timeout == 0) {
    ambulance.sirens--;
    ambulance.siren_timeout = 60 * 10;
    audio_play_sound(sound_ambulance_siren, 0, true);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(show_question('Do you want to restart the game?')) {
    room = level_1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
